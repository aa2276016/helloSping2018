# 隐形递归

# 举例: 阶乘数列
# n: 1 2 3  4  5
# v: 1 2 6 24 120

# 普通递归, 很容易理解
def fact(n):
    """求阶乘数列第n项"""
    if n == 1:
        return 1
    else:
        return n * fact(n-1)

# 若是使用lambda函数一行解决,也很好理解,基本就是一个简单变体
fact = lambda n: 1 if n == 1 else n * fact(n-1)
#                                      |
#                                     这个函数也是递归,因为在内部又call了一次fact


# 再写一个函数,实现同样的功能
# 1: 只允许写一行 (不得再使用"=")
# 2: 函数中不得再使用fact_x这个名词 (但还是使用递归)
"""请作答"""
fact_x =

# 答案已经给出,在第500行, 解不出可以直接看

if __name__ == '__main__':
    assert fact_x(4) == 24
    assert fact_x(5) == 120
    print('all passed')



















































































































































































































































































































































































































































































fact_x = lambda n: (lambda f, v: f(f, v))(lambda f, v: 1 if v == 1 else v * f(f, v-1), n)
